{"version":3,"file":"static/js/179.9a143385.chunk.js","mappings":"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","sources":["components/widgets/LineChartWidget.js","components/widgets/BarChartWidget.js","components/widgets/PieChartWidget.js","components/widgets/ActivityFeed.js","components/Dashboard.js","components/Overview.js","redux/actions.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport './Widget.css';\r\n\r\nconst LineChartWidget = ({ data }) => {\r\n  return (\r\n    <div className=\"widget\">\r\n      <h3>User Activity Over Time</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"date\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineChartWidget;\r\n","import React from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n} from 'recharts';\r\nimport './Widget.css';\r\n\r\nconst BarChartWidget = ({ data }) => {\r\n  return (\r\n    <div className=\"widget\">\r\n      <h3>Sales Data</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <BarChart data={data}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"month\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey=\"sales\" fill=\"#82ca9d\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BarChartWidget;\r\n","import React from 'react';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport './Widget.css';\r\n\r\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\r\n\r\nconst PieChartWidget = ({ data }) => {\r\n  return (\r\n    <div className=\"widget\">\r\n      <h3>User Demographics</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <PieChart>\r\n          <Pie\r\n            data={data}\r\n            dataKey=\"value\"\r\n            nameKey=\"name\"\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            outerRadius={80}\r\n            fill=\"#8884d8\"\r\n            label\r\n          >\r\n            {data.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip />\r\n          <Legend />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PieChartWidget;\r\n","import React from 'react';\r\nimport './Widget.css';\r\n\r\nconst ActivityFeed = ({ activities }) => {\r\n  return (\r\n    <div className=\"widget\">\r\n      <h3>Recent Activity</h3>\r\n      <ul className=\"activity-feed\">\r\n        {activities.map((activity) => (\r\n          <li key={activity.id}>\r\n            <span className=\"activity-text\">{activity.activity}</span>\r\n            <span className=\"activity-time\">{activity.time}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActivityFeed;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchData } from '../redux/actions';\r\nimport LineChartWidget from './widgets/LineChartWidget';\r\nimport BarChartWidget from './widgets/BarChartWidget';\r\nimport PieChartWidget from './widgets/PieChartWidget';\r\nimport ActivityFeed from './widgets/ActivityFeed';\r\nimport './Dashboard.css';\r\n\r\nconst Dashboard = () => {\r\n  const dispatch = useDispatch();\r\n  const { userActivity, salesData, userDemographics, recentActivity, loading, error } = useSelector(\r\n    (state) => state.data\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchData());\r\n    const interval = setInterval(() => {\r\n      dispatch(fetchData());\r\n    }, 60000); // refresh data every 60 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [dispatch]);\r\n\r\n  if (loading) return <div>Loading data...</div>;\r\n  if (error) return <div>Error loading data: {error}</div>;\r\n\r\n  return (\r\n    <div className=\"dashboard-grid\">\r\n      <LineChartWidget data={userActivity} />\r\n      <BarChartWidget data={salesData} />\r\n      <PieChartWidget data={userDemographics} />\r\n      <ActivityFeed activities={recentActivity} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport Dashboard from './Dashboard';\r\n\r\nconst Overview = () => {\r\n  return <Dashboard />;\r\n};\r\n\r\nexport default Overview;\r\n","export const toggleDarkMode = () => ({\r\n  type: 'TOGGLE_DARK_MODE',\r\n});\r\n\r\nexport const toggleSidebar = () => ({\r\n  type: 'TOGGLE_SIDEBAR',\r\n});\r\n\r\nexport const fetchData = () => async (dispatch) => {\r\n  dispatch({ type: 'FETCH_DATA_REQUEST' });\r\n  try {\r\n    // Simulate API call with timeout\r\n    const mockData = {\r\n      userActivity: [\r\n        { date: '2024-01-01', value: 30 },\r\n        { date: '2024-01-02', value: 45 },\r\n        { date: '2024-01-03', value: 28 },\r\n        { date: '2024-01-04', value: 60 },\r\n        { date: '2024-01-05', value: 50 },\r\n      ],\r\n      salesData: [\r\n        { month: 'Jan', sales: 400 },\r\n        { month: 'Feb', sales: 300 },\r\n        { month: 'Mar', sales: 500 },\r\n        { month: 'Apr', sales: 700 },\r\n        { month: 'May', sales: 600 },\r\n      ],\r\n      userDemographics: [\r\n        { name: 'Group A', value: 400 },\r\n        { name: 'Group B', value: 300 },\r\n        { name: 'Group C', value: 300 },\r\n      ],\r\n      recentActivity: [\r\n        { id: 1, activity: 'User John logged in', time: '2 mins ago' },\r\n        { id: 2, activity: 'User Jane updated settings', time: '10 mins ago' },\r\n        { id: 3, activity: 'New user registered', time: '1 hour ago' },\r\n      ],\r\n    };\r\n    await new Promise((resolve) => setTimeout(resolve, 1000)); // simulate delay\r\n    dispatch({ type: 'FETCH_DATA_SUCCESS', payload: mockData });\r\n  } catch (error) {\r\n    dispatch({ type: 'FETCH_DATA_FAILURE', payload: error.message });\r\n  }\r\n};\r\n"],"names":["_ref","data","_jsxs","className","children","_jsx","ResponsiveContainer","width","height","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Line","type","stroke","activeDot","r","BarChart","Bar","fill","COLORS","PieChart","Pie","nameKey","cx","cy","outerRadius","label","map","entry","index","Cell","length","Legend","activities","activity","time","id","Dashboard","dispatch","useDispatch","userActivity","salesData","userDemographics","recentActivity","loading","error","useSelector","state","useEffect","fetchData","interval","setInterval","clearInterval","LineChartWidget","BarChartWidget","PieChartWidget","ActivityFeed","Overview","toggleDarkMode","toggleSidebar","async","mockData","date","value","month","sales","name","Promise","resolve","setTimeout","payload","message"],"sourceRoot":""}